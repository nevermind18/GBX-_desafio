package desafio.gbx.desafio.service;import desafio.gbx.desafio.entity.TransacaoEntity;import desafio.gbx.desafio.repository.TransacaoRepository;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.http.ResponseEntity;import org.springframework.stereotype.Service;import java.time.LocalDateTime;import java.util.Objects;@Servicepublic class TransacaoService {    @Autowired    private TransacaoRepository transacaoRepository;    @Autowired    private UsuarioService usuarioService;    public ResponseEntity criarTransacao(TransacaoEntity transacao) {        transacao.setData(LocalDateTime.now());        var destino = usuarioService.existConta(transacao.getContaDestino().getNumeroConta());        var origem = usuarioService.existConta(transacao.getContaOrigem().getNumeroConta());        if(Objects.isNull(destino)){            return ResponseEntity.status(404).body("conta de destino não existe");        }        if(Objects.isNull(origem)){            return ResponseEntity.status(404).body("conta de origem não existe");        }        if(origem.getSaldo() < transacao.getValor()){            return ResponseEntity.status(400).body("o saldo insuficiente");        }        usuarioService.atualizaValor(origem.getNumeroConta(), -transacao.getValor());        usuarioService.atualizaValor(destino.getNumeroConta(), transacao.getValor());        transacao.getContaDestino().setId(destino.getId());        transacao.getContaOrigem().setId(origem.getId());        return ResponseEntity.ok(transacaoRepository.save(transacao));    }    public ResponseEntity consultaTransacao(Integer id) {        var transcaocao = transacaoRepository.findById(id.longValue()).orElse(null);        if (Objects.isNull(transcaocao))            return ResponseEntity.notFound().build();        return ResponseEntity.ok(transcaocao);    }}